"""
    Pinecone Assistant Engine API

    Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge  from millions of documents at scale. This API supports interactions with assistants.   # noqa: E501

    The version of the OpenAPI document: v1alpha
    Contact: support@pinecone.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pinecone_plugins.assistant.data.core.client.api_client import ApiClient, Endpoint as _Endpoint
from pinecone_plugins.assistant.data.core.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pinecone_plugins.assistant.data.core.client.model.assistant_file_model import AssistantFileModel
from pinecone_plugins.assistant.data.core.client.model.chat_completion_model import ChatCompletionModel
from pinecone_plugins.assistant.data.core.client.model.inline_object1 import InlineObject1
from pinecone_plugins.assistant.data.core.client.model.inline_response200 import InlineResponse200
from pinecone_plugins.assistant.data.core.client.model.inline_response401 import InlineResponse401


class ManageAssistantsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __chat_completion_assistant(
            self,
            assistant_name,
            inline_object1,
            **kwargs
        ):
            """Search / chat with an assistant  # noqa: E501

            This operation queries the completions endpoint of a Pinecone Assistant.      For guidance and examples, see [query chat completions]().  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.chat_completion_assistant(assistant_name, inline_object1, async_req=True)
            >>> result = thread.get()

            Args:
                assistant_name (str): The name of the assistant to be described.
                inline_object1 (InlineObject1):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ChatCompletionModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assistant_name'] = \
                assistant_name
            kwargs['inline_object1'] = \
                inline_object1
            return self.call_with_http_info(**kwargs)

        self.chat_completion_assistant = _Endpoint(
            settings={
                'response_type': (ChatCompletionModel,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/assistant/chat/{assistant_name}/chat/completions',
                'operation_id': 'chat_completion_assistant',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'assistant_name',
                    'inline_object1',
                ],
                'required': [
                    'assistant_name',
                    'inline_object1',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assistant_name':
                        (str,),
                    'inline_object1':
                        (InlineObject1,),
                },
                'attribute_map': {
                    'assistant_name': 'assistant_name',
                },
                'location_map': {
                    'assistant_name': 'path',
                    'inline_object1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/event-stream'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__chat_completion_assistant
        )

        def __delete_file(
            self,
            assistant_name,
            assistant_file_id,
            **kwargs
        ):
            """Delete an uploaded file  # noqa: E501

            This operation deletes an uploaded file from an assistant.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_file(assistant_name, assistant_file_id, async_req=True)
            >>> result = thread.get()

            Args:
                assistant_name (str): The name of the assistant to upload files to.
                assistant_file_id (str): The uuid of the file to be described.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assistant_name'] = \
                assistant_name
            kwargs['assistant_file_id'] = \
                assistant_file_id
            return self.call_with_http_info(**kwargs)

        self.delete_file = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/assistant/files/{assistant_name}/{assistant_file_id}',
                'operation_id': 'delete_file',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'assistant_name',
                    'assistant_file_id',
                ],
                'required': [
                    'assistant_name',
                    'assistant_file_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assistant_name':
                        (str,),
                    'assistant_file_id':
                        (str,),
                },
                'attribute_map': {
                    'assistant_name': 'assistant_name',
                    'assistant_file_id': 'assistant_file_id',
                },
                'location_map': {
                    'assistant_name': 'path',
                    'assistant_file_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_file
        )

        def __describe_file(
            self,
            assistant_name,
            assistant_file_id,
            **kwargs
        ):
            """Describe a file upload  # noqa: E501

            This operation provides a description of an uploaded file.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.describe_file(assistant_name, assistant_file_id, async_req=True)
            >>> result = thread.get()

            Args:
                assistant_name (str): The name of the assistant to upload files to.
                assistant_file_id (str): The uuid of the file to be described.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssistantFileModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assistant_name'] = \
                assistant_name
            kwargs['assistant_file_id'] = \
                assistant_file_id
            return self.call_with_http_info(**kwargs)

        self.describe_file = _Endpoint(
            settings={
                'response_type': (AssistantFileModel,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/assistant/files/{assistant_name}/{assistant_file_id}',
                'operation_id': 'describe_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'assistant_name',
                    'assistant_file_id',
                ],
                'required': [
                    'assistant_name',
                    'assistant_file_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assistant_name':
                        (str,),
                    'assistant_file_id':
                        (str,),
                },
                'attribute_map': {
                    'assistant_name': 'assistant_name',
                    'assistant_file_id': 'assistant_file_id',
                },
                'location_map': {
                    'assistant_name': 'path',
                    'assistant_file_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__describe_file
        )

        def __list_files(
            self,
            assistant_name,
            **kwargs
        ):
            """List Files  # noqa: E501

            This operation returns a list of all files in an assistant.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_files(assistant_name, async_req=True)
            >>> result = thread.get()

            Args:
                assistant_name (str): The name of the assistant to be described.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assistant_name'] = \
                assistant_name
            return self.call_with_http_info(**kwargs)

        self.list_files = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/assistant/files/{assistant_name}',
                'operation_id': 'list_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'assistant_name',
                ],
                'required': [
                    'assistant_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assistant_name':
                        (str,),
                },
                'attribute_map': {
                    'assistant_name': 'assistant_name',
                },
                'location_map': {
                    'assistant_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_files
        )

        def __upload_file(
            self,
            assistant_name,
            **kwargs
        ):
            """Upload file to assistant  # noqa: E501

            This operation uploads a file to a specified assistant  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.upload_file(assistant_name, async_req=True)
            >>> result = thread.get()

            Args:
                assistant_name (str): The name of the assistant to upload files to.

            Keyword Args:
                file (file_type): The file to upload.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssistantFileModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assistant_name'] = \
                assistant_name
            return self.call_with_http_info(**kwargs)

        self.upload_file = _Endpoint(
            settings={
                'response_type': (AssistantFileModel,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/assistant/files/{assistant_name}',
                'operation_id': 'upload_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'assistant_name',
                    'file',
                ],
                'required': [
                    'assistant_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assistant_name':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'assistant_name': 'assistant_name',
                    'file': 'file',
                },
                'location_map': {
                    'assistant_name': 'path',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__upload_file
        )
